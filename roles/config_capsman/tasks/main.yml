---
  - name: add cap interface mikrotik
    routeros_command:
      commands: "{{ mikrotik_config_cap_interface_add }}"
    when:
      - ansible_network_os == 'routeros'
      - submenu == 'cap_interface'
      - action == 'add'

  - name: remove cap interface mikrotik
    routeros_command:
      commands: "{{ mikrotik_config_cap_interface_remove }}"
    when:
      - ansible_network_os == 'routeros'
      - submenu == 'cap_interface'
      - action == 'remove'

  - name: enable cap interface mikrotik
    routeros_command:
      commands: "{{ mikrotik_config_cap_interface_enable }}"
    when:
      - ansible_network_os == 'routeros'
      - submenu == 'cap_interface'
      - action == 'enable'

  - name: disable cap interface mikrotik
    routeros_command:
      commands: "{{ mikrotik_config_cap_interface_disable }}"
    when:
      - ansible_network_os == 'routeros'
      - submenu == 'cap_interface'
      - action == 'disable'

  - name: set cap interface mikrotik
    routeros_command:
      commands: "{{ mikrotik_config_cap_interface_set }}"
    when:
      - ansible_network_os == 'routeros'
      - submenu == 'cap_interface'
      - action == 'set'


  - name: add caps provisioning mikrotik
    routeros_command:
      commands: "{{ mikrotik_config_caps_provisioning_add }}"
    when:
      - ansible_network_os == 'routeros'
      - submenu == 'caps_provisioning'
      - action == 'add'

  - name: remove caps provisioning mikrotik
    routeros_command:
      commands: "{{ mikrotik_config_caps_provisioning_remove }}"
    when:
      - ansible_network_os == 'routeros'
      - submenu == 'caps_provisioning'
      - action == 'remove'

  - name: enable caps provisioning mikrotik
    routeros_command:
      commands: "{{ mikrotik_config_caps_provisioning_enable }}"
    when:
      - ansible_network_os == 'routeros'
      - submenu == 'caps_provisioning'
      - action == 'enable'

  - name: disable caps provisioning mikrotik
    routeros_command:
      commands: "{{ mikrotik_config_caps_provisioning_disable }}"
    when:
      - ansible_network_os == 'routeros'
      - submenu == 'caps_provisioning'
      - action == 'disable'

  - name: set caps provisioning mikrotik
    routeros_command:
      commands: "{{ mikrotik_config_caps_provisioning_set }}"
    when:
      - ansible_network_os == 'routeros'
      - submenu == 'caps_provisioning'
      - action == 'set'


  - name: add caps configuration mikrotik
    routeros_command:
      commands: "{{ mikrotik_config_caps_configuration_add }}"
    when:
      - ansible_network_os == 'routeros'
      - submenu == 'caps_configuration'
      - action == 'add'

  - name: remove caps configuration mikrotik
    routeros_command:
      commands: "{{ mikrotik_config_caps_configuration_remove }}"
    when:
      - ansible_network_os == 'routeros'
      - submenu == 'caps_configuration'
      - action == 'remove'

  - name: set caps configuration mikrotik
    routeros_command:
      commands: "{{ mikrotik_config_caps_configuration_set }}"
    when:
      - ansible_network_os == 'routeros'
      - submenu == 'caps_configuration'
      - action == 'set'


  - name: add caps channel mikrotik
    routeros_command:
      commands: "{{ mikrotik_config_caps_channel_add }}"
    when:
      - ansible_network_os == 'routeros'
      - submenu == 'caps_channel'
      - action == 'add'

  - name: remove caps channel mikrotik
    routeros_command:
      commands: "{{ mikrotik_config_caps_channel_remove }}"
    when:
      - ansible_network_os == 'routeros'
      - submenu == 'caps_channel'
      - action == 'remove'

  - name: set caps channel mikrotik
    routeros_command:
      commands: "{{ mikrotik_config_caps_channel_set }}"
    when:
      - ansible_network_os == 'routeros'
      - submenu == 'caps_channel'
      - action == 'set'


  - name: add caps datapath mikrotik
    routeros_command:
      commands: "{{ mikrotik_config_caps_datapath_add }}"
    when:
      - ansible_network_os == 'routeros'
      - submenu == 'caps_datapath'
      - action == 'add'

  - name: remove caps datapath mikrotik
    routeros_command:
      commands: "{{ mikrotik_config_caps_datapath_remove }}"
    when:
      - ansible_network_os == 'routeros'
      - submenu == 'caps_datapath'
      - action == 'remove'

  - name: set caps datapath mikrotik
    routeros_command:
      commands: "{{ mikrotik_config_caps_datapath_set }}"
    when:
      - ansible_network_os == 'routeros'
      - submenu == 'caps_datapath'
      - action == 'set'


  - name: add caps security cfg mikrotik
    routeros_command:
      commands: "{{ mikrotik_config_caps_security_cfg_add }}"
    when:
      - ansible_network_os == 'routeros'
      - submenu == 'caps_security_cfg'
      - action == 'add'

  - name: remove caps security cfg mikrotik
    routeros_command:
      commands: "{{ mikrotik_config_caps_security_cfg_remove }}"
    when:
      - ansible_network_os == 'routeros'
      - submenu == 'caps_security_cfg'
      - action == 'remove'

  - name: set caps security cfg mikrotik
    routeros_command:
      commands: "{{ mikrotik_config_caps_security_cfg_set }}"
    when:
      - ansible_network_os == 'routeros'
      - submenu == 'caps_security_cfg'
      - action == 'set'


  - name: add caps access rule mikrotik
    routeros_command:
      commands: "{{ mikrotik_config_caps_access_rule_add }}"
    when:
      - ansible_network_os == 'routeros'
      - submenu == 'caps_access_rule'
      - action == 'add'

  - name: remove caps access rule mikrotik
    routeros_command:
      commands: "{{ mikrotik_config_caps_access_rule_remove }}"
    when:
      - ansible_network_os == 'routeros'
      - submenu == 'caps_access_rule'
      - action == 'remove'

  - name: enable caps access rule mikrotik
    routeros_command:
      commands: "{{ mikrotik_config_caps_access_rule_enable }}"
    when:
      - ansible_network_os == 'routeros'
      - submenu == 'caps_access_rule'
      - action == 'enable'

  - name: disable caps access rule mikrotik
    routeros_command:
      commands: "{{ mikrotik_config_caps_access_rule_disable }}"
    when:
      - ansible_network_os == 'routeros'
      - submenu == 'caps_access_rule'
      - action == 'disable'

  - name: set caps access rule mikrotik
    routeros_command:
      commands: "{{ mikrotik_config_caps_access_rule_set }}"
    when:
      - ansible_network_os == 'routeros'
      - submenu == 'caps_access_rule'
      - action == 'set'


  - name: add caps rate mikrotik
    routeros_command:
      commands: "{{ mikrotik_config_caps_rate_add }}"
    when:
      - ansible_network_os == 'routeros'
      - submenu == 'caps_rate'
      - action == 'add'

  - name: remove caps rate mikrotik
    routeros_command:
      commands: "{{ mikrotik_config_caps_rate_remove }}"
    when:
      - ansible_network_os == 'routeros'
      - submenu == 'caps_rate'
      - action == 'remove'

  - name: set caps rate mikrotik
    routeros_command:
      commands: "{{ mikrotik_config_caps_rate_set }}"
    when:
      - ansible_network_os == 'routeros'
      - submenu == 'caps_rate'
      - action == 'set'
